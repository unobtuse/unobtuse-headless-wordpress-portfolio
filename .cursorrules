# .cursorrules for Unobtuse Headless WordPress Portfolio

###############################################
# High-Level Project Requirements
###############################################

- Project: Headless portfolio site for Unobtuse, built with Next.js (React), using WordPress as a headless CMS via WPGraphQL.
- Must be version-controlled and deployed using GitHub.
- All code, dependencies, and instructions must allow for redeployment by anyone who clones the repository.
- Modern, beautiful design using TailwindCSS, shadcn/ui, and Framer Motion.
- Animations should be used for visual polish (page transitions, component reveals, hover effects).
- All styling must use TailwindCSS utility classes exclusively.
- Implement accessibility features on all interactive elements (aria-labels, tabindex, keyboard handlers).
- Fully functional, complete, and DRY code (no TODOs, no placeholders, no missing pieces).
- Easy to understand, easy to read, and easy to extend.
- **The site must be fully compatible with content and pages created using Elementor in WordPress.**
  - This includes proper rendering of Elementor-generated HTML, blocks, and widgets when fetched via WPGraphQL.
  - Styling should gracefully accommodate and visually harmonize Elementor content within the headless frontend.
  - Any dynamic Elementor widgets should be rendered as close to original as technically feasible.

###############################################
# GitHub & Redeployability Rules
###############################################

- The project must be a public repository on GitHub.
- Include a complete README.md with clear setup instructions (install dependencies, configure environment variables, connect to WPGraphQL endpoint, run locally, deploy to Vercel/Netlify).
- Include example .env files, scripts, and all configuration for smooth onboarding.
- Use only open source libraries; ensure all dependencies are in package.json.
- The code must run with `npm install` and `npm run dev` without errors.
- Avoid hardcoded values. All environment-specific settings must use environment variables.
- Ensure WPGraphQL API URL is settable via environment variable.
- Provide a script or documentation for deploying (Vercel, Netlify, or similar).

###############################################
# Code Implementation Guidelines
###############################################

- All code must be in TypeScript.
- Use Next.js 14+ App Router.
- All UI must use TailwindCSS classes, avoid any inline or external CSS.
- Prefer shadcn/ui and Radix UI for components; extend with Tailwind as needed.
- Use Framer Motion for animation (page, component, interaction).
- Use early returns for better readability.
- Use descriptive variable and function names.
- All event handlers must use the `handle` prefix (e.g., `handleClick`, `handleKeyDown`).
- Use `const` for all functions and components.
- Define types for all component props and relevant data structures.
- No unused imports, no dead code.
- Do not use the ternary operator for className toggling; use `class:` utility or appropriate alternatives.
- Implement accessibility: tabindex, aria-label, keyboard events on all a/button/interactive elements.
- Minimize prose in code, add concise, necessary comments only.
- Ensure no TODOs, placeholders, or incomplete pieces remain.
- No direct CSS or SCSS files; style exclusively with TailwindCSS.
- All assets (images, animations, etc.) must be included or linked as open source or free-to-use.

###############################################
# Pseudocode and Planning Rules
###############################################

- Before writing any code, always write a detailed step-by-step pseudocode plan.
- The plan must describe what to build, including all key features, pages, and components.
- Only proceed to code after the pseudocode is written and reviewed.
- Pseudocode and code must follow all the rules in this file.

###############################################
# Review and QA Rules
###############################################

- Verify all pages and features are fully implemented, bug-free, and meet requirements.
- Run linting and formatting (eslint, prettier) on all code before commit.
- Run accessibility checks (axe, Lighthouse, etc.) before deployment.
- Perform end-to-end testing of all critical flows before marking as complete.

###############################################
# Example Tech Stack
###############################################

- Next.js (App Router, TypeScript)
- TailwindCSS
- shadcn/ui
- Radix UI
- Framer Motion
- WPGraphQL
- React Query or SWR for data fetching

###############################################
# Project Accomplishments & Implementation Status
###############################################

## ‚úÖ COMPLETED FEATURES

### Site Structure & Pages
- ‚úÖ Home Page (/): Hero with video background, services overview, CTA sections
- ‚úÖ WordPress Development (/wordpress-development): Service details, tech stack, process
- ‚úÖ Design Process (/design-process): 6-step methodology, principles, tools
- ‚úÖ Case Studies (/case-studies): Project showcase with filtering, 6 mock projects
- ‚úÖ Portfolio (/portfolio): Interactive gallery with featured/all sections, filtering
- ‚úÖ About Gabriel (/about): Bio, skills matrix, experience, achievements, contact

### Technical Implementation
- ‚úÖ Next.js 14 App Router with TypeScript
- ‚úÖ TailwindCSS styling with shadcn/ui components
- ‚úÖ Framer Motion animations throughout
- ‚úÖ Responsive design (mobile-first approach)
- ‚úÖ Accessibility features (ARIA labels, keyboard navigation)
- ‚úÖ Apollo GraphQL client setup for WordPress integration
- ‚úÖ WordPress connection tested and working (GraphQL endpoint)

### Components & Layout
- ‚úÖ Navigation.tsx: Responsive nav with mobile menu, smooth animations
- ‚úÖ Footer.tsx: Site links, contact info, copyright
- ‚úÖ Layout.tsx: Root layout with Inter font, metadata

### WordPress Integration
- ‚úÖ Apollo Client configured with environment variables
- ‚úÖ GraphQL queries structure in lib/queries.ts
- ‚úÖ TypeScript interfaces for WordPress data
- ‚úÖ Test connection functionality working
- ‚úÖ Successfully connected to WordPress at beta.unobtuse.com

### Assets & Configuration
- ‚úÖ Logo assets moved to public/logos/ (black/white variants)
- ‚úÖ Background video (bg.mp4) in public directory
- ‚úÖ All configuration files (next.config.js, tsconfig.json, tailwind.config.ts)
- ‚úÖ Package.json with all required dependencies
- ‚úÖ ESLint and TypeScript configurations

### Version Control & Deployment Ready
- ‚úÖ Git repository initialized with proper .gitignore
- ‚úÖ Pushed to GitHub: https://github.com/unobtuse/unobtuse-headless-wordpress-portfolio.git
- ‚úÖ Comprehensive README.md with setup instructions
- ‚úÖ Environment variables properly configured (.env.example provided)
- ‚úÖ Security: No hardcoded URLs or sensitive data in repository
- ‚úÖ All builds passing (npm run build, lint, type-check successful)

### Quality Assurance
- ‚úÖ TypeScript: No type errors
- ‚úÖ ESLint: All linting issues resolved
- ‚úÖ Build: Production build successful
- ‚úÖ Development: Running on localhost:3001 (or 3000 if available)
- ‚úÖ All 6 pages load and compile successfully

## üìù IMPORTANT NOTES FOR FUTURE DEVELOPMENT

### WordPress Content Integration
- Mock data currently used for case studies and portfolio items
- Replace with actual GraphQL queries once WordPress content is ready
- Elementor compatibility built into structure, ready for content integration

### Environment Variables Required
- WORDPRESS_API_URL: Server-side GraphQL endpoint
- NEXT_PUBLIC_WORDPRESS_API_URL: Client-side GraphQL endpoint
- Both should point to: https://your-wordpress-site.com/graphql

### Deployment Ready For
- ‚úÖ Vercel (recommended)
- ‚úÖ Netlify
- ‚úÖ Any Node.js hosting provider

### Repository Security
- ‚úÖ No sensitive URLs or credentials in code
- ‚úÖ Proper .gitignore protecting environment files
- ‚úÖ Ready for public repository sharing

###############################################
# Notes
###############################################

- If something is unclear or missing, STOP and ask the user for clarification before proceeding.
- If there is no correct answer, state so. If you do not know, do not guess.

###############################################
# END OF FILE
###############################################
